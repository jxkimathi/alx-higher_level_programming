# 0-add_integer.txt

==========================
How to use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that is the equivalent of using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5
::

    >>> add_integer(2, -3)
    -1


It also works with floating-point values which are casted into ints.

::

    >>> add_integer(2.0, -3.0)
    -1

The second argument is argument and defaults to 98

::

    >>> add_integer(2)
    100

Non-numbers
===========

``add_integer()`` expects that either arguments are either floats or integers.
If either argument is a non-float or a non-integer, a TypeError is raised.

::

    >>> add_integer(4, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer("hello", -3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers or non-floats, an error message is only
written from the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

Function will fail if infinity is introduced.

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: Cannot convert float infinity to integer

Again with NaN numbers

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: Cannot convert float nan to integer